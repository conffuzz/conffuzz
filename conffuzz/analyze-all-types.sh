#!/bin/bash

# set -x

# Inputs:
#  1. Where to output results
OUT=$1
#  2. API description as generated by analyze-symbol.sh
API_DESCRIPTION=$2
#  3. Paths of the libraries that may define the symbol
#     See (x)

# Output:
# One line per type, of the format:
#  [type name] [type size]
# or
#  [type name]
# if the type size could not be determined

BASEDIR=$(dirname "$0")
TYPE_ANALYZER=${BASEDIR}/analyze-type.sh
PRIM_DICT=${BASEDIR}/primitive-types.txt
TMP=/tmp/analyze-all-types.sh.tmp
TMP2=/tmp/analyze-all-types.sh.tmp.2

NFF=${OUT}.failed-log

# start from clean ground, remove stale output
rm -rf $OUT $NFF $TMP $TMP2

# - remove symbol names and argument count
# - put each type on its own line
# - remove trailing newlines
# - we are interested in the size of objects, not of pointers
# - we're not interested in function pointers
# - we're not interested in primitive types
# - sort and remove duplicates
# - discard stderr output
cat $API_DESCRIPTION           | \
	cut -d' ' -f 4-         | \
	sed "s/ /\n/g"          | \
	sed "s/\n\n/\n/g"       | \
	sed "s/*//g"            | \
	awk '!/)/'              | \
	grep -f ${PRIM_DICT} -v | \
	sort -u > $TMP

# (x) iterate over libs passed
for i in "${@:3}"
do
    # run the type analyzer on every line, merge with previous results
    while read line; do $TYPE_ANALYZER $line $i >> $TMP2; done < $TMP
done

# deduplicate (go for smallest)
cat $TMP2 | sort -uk1,1 > $OUT

# keep track of types for which we didn't find the size
cat $OUT | cut -f 1 -d' ' | sponge $TMP2
grep -Fxvf $TMP2 $TMP > $NFF

# unknown sizes should also be part of the output
cat $NFF >> $OUT

# remove empty lines
awk NF $OUT > $TMP
mv $TMP $OUT

# cleanup after ourselves
rm -rf $TMP $TMP2
